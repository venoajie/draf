  
#!/usr/bin/env python
# -*- coding: utf-8 -*-
# pylint: disable=W0613, C0116
# type: ignore[union-attr]
# This program is dedicated to the public domain under the CC0 license.

"""
First, a few callback functions are defined. Then, those functions are passed to
the Dispatcher and registered at their respective places.
Then, the bot is started and runs until we press Ctrl-C on the command line.
Usage:
Example of a bot-user conversation using ConversationHandler.
Send /start to initiate the conversation.
Press Ctrl-C on the command line or send a signal to the process to stop the
bot.
"""
#https://github.com/python-telegram-bot/python-telegram-bot/blob/master/examples/conversationbot.py

import logging

from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    ConversationHandler,
    CallbackContext,
)

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

logger = logging.getLogger(__name__)

GENDER, PHOTO, LOCATION, BIO = range(4)


def start(update: Update, context: CallbackContext) -> int:
    reply_keyboard = [['Order book', 'Price Action', 'Technical Analysis']]

    update.message.reply_text(
        'Alat bantu analisa harga saham \n\n'
        'Ketik /cancel untuk keluar.\n\n'
        'Pilih alat analisa',
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True),
    )

    return GENDER
    

def gender(update: Update, context: CallbackContext) -> int:
    user = update.message.from_user
#    print('user',user)
    print('message',update.message['text'])
#    print('context',context)
    print('logger.info("Gender of %s: %s", user.first_name, update.message.text)',logger.info("Gender of %s: %s", user.first_name, update.message.text))
#    logger.info("Gender of %s: %s", user.first_name, update.message.text)
#    print('logger.info("Gender of %s: %s", user.first_name, update.message.text)',logger.info("Gender of %s: %s", user.first_name, update.message.text))

    if update.message['text'] == 'Order book':
        update.message.reply_text(
        'Menarik data order book untuk seluruh saham \n\n '
        'data per saham dikirimkan melalui  bot, keseluruhan dikirimkan melalui e mail \n\n'
        'ketik /skip untuk keluar',
        reply_markup=ReplyKeyboardRemove(),
    )
        import orderbook2
    if update.message['text'] != 'Order book':
        update.message.reply_text(
        'Under construction \n\n ',
        reply_markup=ReplyKeyboardRemove(),
    )

    return PHOTO


def photo(update: Update, context: CallbackContext) -> int:
    user = update.message.from_user
    print('user',user)
    update.message.reply_text(
        'Under construction, ' 'ketik /skip untuk keluar'
    )

    return LOCATION


def skip_photo(update: Update, context: CallbackContext) -> int:
    
    update.message.reply_text(
        'Under construction: https://github.com/venoajie/draf, ' 'ketik /skip untuk keluar'
    )

    return LOCATION


def location(update: Update, context: CallbackContext) -> int:
    user = update.message.from_user
    user_location = update.message.location
    logger.info(
        "Location of %s: %f / %f", user.first_name, user_location.latitude, user_location.longitude
    )
    update.message.reply_text(
        'Under construction, ' 'ketik /skip untuk keluar'
    )

    return BIO


def skip_location(update: Update, context: CallbackContext) -> int:
    
    update.message.reply_text(
        'Under construction, ' 'ketik /skip untuk keluar'
    )

    return BIO


def bio(update: Update, context: CallbackContext) -> int:
    
    update.message.reply_text('Under construction, ' 'ketik /skip untuk keluar')

    return ConversationHandler.END


def cancel(update: Update, context: CallbackContext) -> int:
    user = update.message.from_user
    logger.info("User %s canceled the conversation.", user.first_name)
    update.message.reply_text(
        'Bye! ', reply_markup=ReplyKeyboardRemove()
    )

    return ConversationHandler.END


def main() -> None:
    # Create the Updater and pass it your bot's token.
    # Make sure to set use_context=True to use the new context based callbacks
    # Post version 12 this will no longer be necessary
    updater = Updater('1035682714:AAGea_Lk2ZH3X6BHJt3xAudQDSn5RHwYQJM', use_context=True)

    # Get the dispatcher to register handlers
    dispatcher = updater.dispatcher

    # Add conversation handler with the states GENDER, PHOTO, LOCATION and BIO
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            GENDER: [MessageHandler(Filters.regex('^(Order book|Price Action|Technical Analysis)$'), gender)],
            PHOTO: [MessageHandler(Filters.photo, photo), CommandHandler('skip', skip_photo)],
            LOCATION: [
                MessageHandler(Filters.location, location),
                CommandHandler('skip', skip_location),
            ],
            BIO: [MessageHandler(Filters.text & ~Filters.command, bio)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    dispatcher.add_handler(conv_handler)

    # Start the Bot
    updater.start_polling()

    # Run the bot until you press Ctrl-C or the process receives SIGINT,
    # SIGTERM or SIGABRT. This should be used most of the time, since
    # start_polling() is non-blocking and will stop the bot gracefully.
    updater.idle()


if __name__ == '__main__':
    main()
